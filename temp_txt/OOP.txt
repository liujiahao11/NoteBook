1.对象命名要满足大驼峰命名法：
CapWords,首字母大写，没有下划线

2.dir查看对象的方法列表
dir(对象)，获得所有方法的列表，含有__name__的是内置方法/属性

3.定义类
class 类名：
	def 方法1(self,参数):
		pass
4.创建对象
对象变量 = 类名（）
class Cat:
 18     def eat(self):
 19         print("小猫吃鱼")
 20     def drink(self):
 21         print("drink")
 22 
 23 tom = Cat()
 24 tom.eat()
 25 tom.drink()

5.可以在类的定义外部添加属性：
tom = Cat()
tom.name="Tom"

6.利用self在类封装的方法中输出对象属性
self即为本对象
def eat(self):
	print(self.name)
在类内部，self.访问对象的属性，调用对象的方法

7.注意：6中的方法可能有没有相应属性的隐患，因此应将属性封装在内部

8.初始化方法:为属性设置初始值
def __init__(self,name):
	self.name=name 

9.del方法
__del__:销毁时调用

10.__str__方法
使用print(对象)方法时自动调用，
默认返回对象的类和地址（16进制）
在自己定义时应该注意返回字符串

11.私有属性和私有方法
__name,
__secret()
即加两个下划线

12.伪私有属性和伪私有方法
_类名__私有属性
_类名__私有方法()


13.继承语法
class 子类(父类)：
	pass


14.方法的重写(override)
直接重新实现方法：def


15.继承具有传递性

16.对父类方法的扩展
super().parent方法：调用父类方法

17.子类不能继承父类的私有属性和私有方法
不能在子类内部和外部访问

18.可以在子类中通过调用父类的公有方法间接调用父类的私有方法和私有属性

19.多继承
子类继承多个父类的属性和方法
class 子类（父类1，父类2）:
	pass

20.两个父类有同名的方法
继承语句中谁在前执行谁

21.MRO（method resolution order）
__mro__,方法搜索顺序
object是所有类的父类

22.多态
不同的子类对象调用相同的父类方法，产生不同的执行结果


23.类对象的属性和方法：
class Tool:
	count = 0
	def __init__(self):
		Tool.count += 1
24.类方法定义

@classmethod
def method(cls):
	cls.name...
	pass

25.静态方法
不需要访问类属性和实例属性的方法
@staticmethod
def 静态方法():
	pass
通过：类名.方法调用


26.__new__方法
给对象分配空间，返回对象引用
return super().__new__(cls)
 
27.单例
创建多个对象，但同时是一个对象 
如果引用为None则返回新的引用，否则返回已有的引用
方式：定义类属性instance=None
定义__new__方法：
if cls.instance is None:
	cls.instance = super().__new__(cls)
return cls.instance
通过设置类对象的标志符属性





